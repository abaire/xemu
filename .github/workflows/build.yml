name: Build

on:
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/build.yml'
      - 'README.md'
      - 'ubuntu-win64-cross/**'
  workflow_dispatch:

jobs:
  Init:
    name: Create source package
    runs-on: ubuntu-latest
    steps:
    - name: Clone tree
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: sudo apt-get install meson
    - name: Create source package
      run: |
        ./scripts/archive-source.sh src.tar
        gzip -1 src.tar
    - name: Upload source package artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: src.tar.gz
        path: src.tar.gz

  Windows:
    name: Build for Windows (${{ matrix.arch }}, ${{ matrix.configuration }}) on Ubuntu
    runs-on: ubuntu-latest
    needs: Init
    strategy:
      matrix:
        include:
        - configuration: DebugRenderDoc
          build_param:  --debug --enable-renderdoc
          artifact_name: xemu-win-x86_64-debugrenderdoc
          arch: x86_64
        - configuration: DebugRenderDoc
          build_param:  --debug --enable-renderdoc
          artifact_name: xemu-win-aarch64-debugrenderdoc
          arch: aarch64
    env:
      DOCKER_IMAGE_NAME: ghcr.io/xemu-project/xemu-win64-toolchain:sha-0d06ce8

    steps:
    - name: Download source package
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v4
      with:
        name: src.tar.gz
    - name: Extract source package
      run: tar xf src.tar.gz
    - name: Initialize compiler cache
      id: cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: /tmp/xemu-ccache
        key: cache-wincross-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.configuration }}-${{ github.sha }}
        restore-keys: cache-wincross-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.configuration }}-
    - name: Pull Docker image
      run: docker pull $DOCKER_IMAGE_NAME
    - name: Compile
      run: |
        mkdir -p /tmp/xemu-ccache
        docker run --rm \
          -v $PWD:/xemu -w /xemu \
          -v /tmp/xemu-ccache:/tmp/xemu-ccache \
          -e CCACHE_DIR=/tmp/xemu-ccache \
          -e CCACHE_MAXSIZE=512M \
          -e CROSSPREFIX=${{ matrix.arch }}-w64-mingw32.static- \
          -e CROSSAR=${{ matrix.arch }}-w64-mingw32.static-ar \
          -u $(id -u):$(id -g) \
          $DOCKER_IMAGE_NAME \
            bash -c "ccache -z;export CFLAGS=\"${CFLAGS} -DDEBUG_NV2A_GL=1 -DSTREAM_GL_DEBUG_MESSAGES=1\"; ./build.sh -p win64-cross ${{ matrix.build_param }} && ccache -s"
    - name: Upload build artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist

  Ubuntu:
    name: Build for Ubuntu (${{matrix.arch}}, ${{ matrix.configuration }})
    runs-on: ${{ matrix.runs-on }}
    needs: Init
    strategy:
      matrix:
        include:
        - arch: x86_64
          configuration: DebugRenderDoc
          build_param: --debug --enable-renderdoc
          artifact_name: xemu-ubuntu-x86_64-debugrenderdoc
          artifact_filename: xemu-ubuntu-x86_64-debugrenderdoc.tgz
          runs-on: ubuntu-22.04
        - arch: aarch64
          configuration: DebugRenderDoc
          build_param: --debug --enable-renderdoc
          artifact_name: xemu-ubuntu-aarch64-debugrenderdoc
          artifact_filename: xemu-ubuntu-aarch64-debugrenderdoc.tgz
          runs-on: ubuntu-24.02-arm
    steps:
    - name: Initialize compiler cache
      id: cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: /tmp/xemu-ccache
        key: cache-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.configuration }}-${{ github.sha }}
        restore-keys: cache-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.configuration }}-
    - name: Download source package
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v4
      with:
        name: src.tar.gz
    - name: Extract source package
      run: |
        mkdir src
        tar -C src -xf src.tar.gz
    - name: Create debian changelog
      run: |
        pushd src
        echo -e "\
        xemu (1:0.0.0-0) unstable; urgency=medium\n\
          Built from $(cat XEMU_VERSION)\n\
         -- Matt Borgerson <contact@mborgerson.com>  $(date -R)" > debian/changelog
        popd
    - name: Install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -qy update
        sudo apt-get install ccache libfuse2
        pushd src
        sudo apt-get -qy build-dep .
    - name: Compile
      run: |
        export CCACHE_DIR=/tmp/xemu-ccache
        export CCACHE_MAXSIZE=512M
        export PATH="/usr/lib/ccache:$PATH"
        export CFLAGS="-DDEBUG_NV2A_GL=1 -DSTREAM_GL_DEBUG_MESSAGES=1"
        export XEMU_BUILD_OPTIONS="${{ matrix.build_param }}"
        ccache -z

        # XXX: dpkg-genbuildinfo takes two minutes on GH runners. Nuke it for now.
        sudo rm /usr/bin/dpkg-genbuildinfo
        sudo ln -s /bin/true /usr/bin/dpkg-genbuildinfo

        pushd src
        dpkg-buildpackage --no-sign -b
        popd

        mkdir -p dist
        mv *.deb *.ddeb dist

        echo -e "\n\nCompiler Cache Stats:"
        ccache -s
    - name: Test
      run: |
        pushd src/build
        ./pyvenv/bin/meson test --suite xbox
        popd
    - name: Generate AppImage
      run: |
        wget --no-verbose https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-${{ matrix.arch }}.AppImage
        chmod +x linuxdeploy-${{ matrix.arch }}.AppImage

        ar x dist/*.deb
        mkdir appimage
        tar -C appimage -xf data.tar*
        install -DT src/xemu.metainfo.xml appimage/usr/share/metainfo/xemu.metainfo.xml

        export VERSION=v$(cat src/XEMU_VERSION)-abaire

        ./linuxdeploy-${{ matrix.arch }}.AppImage --output appimage --appdir appimage
        mv xemu-*.AppImage dist
    - name: Bundle artifacts
      run: |
        tar -czvf ${{ matrix.artifact_filename }} --transform "s#^dist#xemu#" dist
    - name: Upload build artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_filename }}
